/**
 * author: Qiangq Jiang
 * date: 2024.12.15
 * 
 * Main constant configuration for objective function
**/

#ifndef CONSTANT_H
#define CONSTANT_H

#define NUM_CORE 20
#define NUM_DVFS 6
#define INPUT_NO 0
#define INPUT_M 6
#define INPUT_H 4
#define MAX_M (NUM_CORE) // the max number of cores
#define MAX_H (NUM_DVFS) // the max number of dvfs levels
#define COMBN (MAX_M * MAX_H)
#define INF 1e+10

// real applications
static const string ra_cases[] = {"fpppp", "robot", "sparse"};

// the available frequency of core on different DVFS levels/GHz
static const float core_freq[NUM_CORE][NUM_DVFS] = {
    {0.9, 2.3, 4.6, 7.4, 8.8, 9.9},
    {0.7, 2.7, 4.4, 6.7, 8.3, 9.9},
    {1.2, 2.5, 4.4, 7.4, 8.6, 9.6},
    {0.7, 1.6, 4.5, 7.4, 8.4, 9.9},
    {1.1, 1.5, 4.3, 6.3, 8.6, 9.9},
    {0.7, 2.7, 3.7, 6.9, 8.3, 9.6},
    {0.8, 1.8, 3.9, 7.5, 8.8, 10.0},
    {0.9, 1.3, 4.6, 6.7, 8.3, 9.7},
    {1.1, 1.5, 4.5, 6.2, 8.6, 10.0},
    {0.7, 1.4, 4.3, 7.4, 8.9, 9.9},
    {0.9, 1.9, 4.7, 6.9, 8.3, 9.9},
    {1.1, 2.1, 3.9, 6.4, 8.7, 9.6},
    {0.8, 2.5, 3.8, 7.5, 8.7, 9.9},
    {0.9, 1.2, 4.8, 6.9, 8.8, 9.4},
    {0.6, 1.2, 3.8, 7.6, 8.5, 9.7},
    {0.8, 1.4, 4.5, 7.4, 8.5, 9.5},
    {0.6, 2.7, 4.2, 7.4, 8.6, 9.6},
    {1.0, 1.9, 3.6, 6.0, 9.0, 9.7},
    {0.6, 2.4, 4.4, 7.1, 9.0, 9.6},
    {0.8, 1.4, 4.4, 6.8, 8.7, 9.9}
};

// the available voltage of core on different DVFS levels/V
static const float core_vol[NUM_CORE][NUM_DVFS] = {
    {0.6, 1.6, 2.4, 2.6, 2.7, 3.3},
    {0.5, 1.5, 2.3, 2.6, 2.8, 3.1},
    {0.6, 1.0, 2.0, 2.5, 3.0, 3.6},
    {0.6, 1.5, 1.8, 2.5, 2.9, 3.2},
    {0.6, 1.5, 1.9, 2.4, 2.8, 3.2},
    {0.7, 1.4, 2.2, 2.6, 2.9, 3.2},
    {0.7, 1.5, 2.3, 2.5, 2.7, 3.6},
    {0.6, 1.6, 2.0, 2.6, 2.8, 3.3},
    {0.7, 1.3, 1.9, 2.4, 3.0, 3.2},
    {0.7, 1.3, 2.1, 2.5, 3.0, 3.5},
    {0.7, 1.4, 2.2, 2.6, 2.8, 3.1},
    {0.6, 1.4, 2.1, 2.5, 2.9, 3.5},
    {0.7, 1.0, 1.8, 2.5, 2.9, 3.4},
    {0.6, 1.1, 2.0, 2.4, 2.9, 3.1},
    {0.5, 1.2, 2.4, 2.4, 2.8, 3.1},
    {0.6, 1.4, 2.0, 2.5, 2.9, 3.1},
    {0.7, 1.3, 2.2, 2.5, 2.9, 3.6},
    {0.6, 1.3, 2.3, 2.4, 2.9, 3.4},
    {0.6, 1.0, 2.2, 2.5, 2.9, 3.5},
    {0.8, 1.1, 2.4, 2.5, 2.8, 3.1}
};

// the bandwidth between two cores (Gbps)
static int band[][NUM_CORE] = {
    {0, 8, 7, 6, 5, 4, 6, 6, 4, 7, 6, 4, 8, 6, 4, 5, 8, 7, 6, 8}, 
    {8, 0, 7, 7, 6, 6, 6, 4, 5, 8, 4, 4, 6, 6, 7, 5, 6, 4, 5, 7}, 
    {7, 7, 0, 6, 7, 6, 7, 5, 8, 8, 8, 6, 5, 6, 6, 8, 4, 4, 7, 6}, 
    {6, 7, 6, 0, 6, 5, 8, 7, 6, 4, 5, 4, 5, 7, 7, 5, 5, 4, 4, 5}, 
    {5, 6, 7, 6, 0, 8, 7, 5, 8, 5, 6, 4, 7, 5, 6, 6, 8, 6, 8, 7}, 
    {4, 6, 6, 5, 8, 0, 8, 7, 5, 6, 8, 8, 5, 8, 8, 4, 7, 7, 6, 6}, 
    {6, 6, 7, 8, 7, 8, 0, 7, 7, 6, 4, 6, 5, 7, 6, 6, 5, 6, 5, 7}, 
    {6, 4, 5, 7, 5, 7, 7, 0, 7, 8, 4, 4, 5, 4, 8, 6, 6, 6, 7, 8},
    {4, 5, 8, 6, 8, 5, 7, 7, 0, 6, 5, 7, 6, 7, 4, 7, 8, 8, 8, 6},
    {7, 8, 8, 4, 5, 6, 6, 8, 6, 0, 8, 5, 5, 7, 5, 6, 7, 5, 4, 4},
    {6, 4, 8, 5, 6, 8, 4, 4, 5, 8, 0, 5, 5, 5, 4, 8, 6, 8, 8, 7},
    {4, 4, 6, 4, 4, 8, 6, 4, 7, 5, 5, 0, 4, 5, 7, 6, 6, 5, 6, 8},
    {8, 6, 5, 5, 7, 5, 5, 5, 6, 5, 5, 4, 0, 8, 6, 4, 5, 5, 6, 4},
    {6, 6, 6, 7, 5, 8, 7, 4, 7, 7, 5, 5, 8, 0, 5, 7, 6, 8, 7, 4},
    {4, 7, 6, 7, 6, 8, 6, 8, 4, 5, 4, 7, 6, 5, 0, 8, 6, 8, 7, 4},
    {5, 5, 8, 5, 6, 4, 6, 6, 7, 6, 8, 6, 4, 7, 8, 0, 8, 8, 5, 5},
    {8, 6, 4, 5, 8, 7, 5, 6, 8, 7, 6, 6, 5, 6, 6, 8, 0, 5, 5, 6},
    {7, 4, 4, 4, 6, 7, 6, 6, 8, 5, 8, 5, 5, 8, 8, 8, 5, 0, 5, 5},
    {6, 5, 7, 4, 8, 6, 5, 7, 8, 4, 8, 6, 6, 7, 7, 5, 5, 5, 0, 4},
    {8, 7, 6, 5, 7, 6, 7, 8, 6, 4, 7, 8, 4, 4, 4, 5, 6, 5, 4, 0}
};

// the Manhattan distance (MD) between the processing cores
static int manhattan[][NUM_CORE] = {
    {0, 1, 0, 3, 2, 1, 0, 3, 0, 1, 0, 0, 2, 1, 3, 0, 2, 1, 1, 2}, 
    {1, 0, 1, 1, 3, 0, 0, 1, 0, 1, 1, 1, 2, 1, 0, 1, 1, 3, 3, 2}, 
    {0, 1, 0, 1, 0, 3, 0, 3, 2, 2, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1}, 
    {3, 1, 1, 0, 3, 3, 0, 0, 0, 1, 1, 1, 2, 3, 0, 3, 2, 3, 2, 0}, 
    {2, 3, 0, 3, 0, 2, 3, 0, 0, 2, 1, 3, 1, 1, 3, 2, 1, 3, 2, 3}, 
    {1, 0, 3, 3, 2, 0, 0, 0, 1, 0, 3, 1, 1, 0, 0, 2, 3, 2, 3, 0}, 
    {0, 0, 0, 0, 3, 0, 0, 3, 2, 3, 1, 0, 1, 1, 3, 2, 1, 1, 2, 3}, 
    {3, 1, 3, 0, 0, 0, 3, 0, 0, 2, 0, 0, 2, 3, 0, 3, 0, 3, 3, 0}, 
    {0, 0, 2, 0, 0, 1, 2, 0, 0, 3, 0, 1, 2, 1, 1, 1, 1, 0, 2, 1}, 
    {1, 1, 2, 1, 2, 0, 3, 2, 3, 0, 3, 2, 0, 0, 0, 1, 2, 3, 3, 3}, 
    {0, 1, 1, 1, 1, 3, 1, 0, 0, 3, 0, 0, 2, 1, 1, 1, 0, 3, 2, 1}, 
    {0, 1, 0, 1, 3, 1, 0, 0, 1, 2, 0, 0, 1, 3, 3, 2, 1, 2, 2, 1},
    {2, 2, 2, 2, 1, 1, 1, 2, 2, 0, 2, 1, 0, 3, 3, 0, 3, 0, 3, 0}, 
    {1, 1, 2, 3, 1, 0, 1, 3, 1, 0, 1, 3, 3, 0, 2, 2, 1, 2, 2, 1}, 
    {3, 0, 0, 0, 3, 0, 3, 0, 1, 0, 1, 3, 3, 2, 0, 2, 1, 2, 0, 3}, 
    {0, 1, 0, 3, 2, 2, 2, 3, 1, 1, 1, 2, 0, 2, 2, 0, 3, 2, 2, 1}, 
    {2, 1, 1, 2, 1, 3, 1, 0, 1, 2, 0, 1, 3, 1, 1, 3, 0, 0, 2, 1}, 
    {1, 3, 0, 3, 3, 2, 1, 3, 0, 3, 3, 2, 0, 2, 2, 2, 0, 0, 3, 1}, 
    {1, 3, 0, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 0, 2, 2, 3, 0, 0}, 
    {2, 2, 1, 0, 3, 0, 3, 0, 1, 3, 1, 1, 0, 1, 3, 1, 1, 1, 0, 0}
};

// the power of core in idle state (W)
static const float core_idle[NUM_CORE] = {0.1, 0.2, 0.1, 0.1, 0.1, 0.2, 0.1, 0.2, 0.2, 0.2, 0.1, 0.1, 0.2, 0.2, 0.1, 0.2, 0.1, 0.2, 0.1, 0.2};

// startup time on cores when triggering data transmission (s)
static float startup[NUM_CORE] = {0.02, 0.02, 0.04, 0.03, 0.02, 0.05, 0.03, 0.03, 0.08, 0.04, 0.02, 0.05, 0.06, 0.07, 0.02, 0.08, 0.04, 0.03, 0.03, 0.06};

// the capacitance of the circuit (F)
float circuit_capacity = 2e-3;

// Communication energy (J/bit)
static float E_router = 0.485;
static float E_link = 0.367;


#endif